//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Input/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""Onfoot"",
            ""id"": ""d9f3a19c-7518-4183-bf86-948382c2b33f"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""73fc673f-8923-4f1c-bd3a-7d7ac8fbc88c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""131cab3c-483b-4b8c-b3da-fec30e687182"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""8c8d44fe-9599-4885-acb1-60c1293aa89c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Crouch"",
                    ""type"": ""Button"",
                    ""id"": ""045064c4-891e-46cf-9a49-7011b8b83941"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Sprint"",
                    ""type"": ""Button"",
                    ""id"": ""edd6fb3a-bf4c-4860-a62f-39b89156f194"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""8b729c33-16f5-4853-b090-eba7bcc8bd96"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""63646600-f39d-4f15-b626-4302b0153514"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""360ab311-ddaf-4401-90a8-b192e0e1f1fa"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""36256fdb-8aa2-49c5-80dc-768b9be367b6"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""ebc50776-d80a-482c-acf6-df70ea6e9f26"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""LeftStick"",
                    ""id"": ""ee99b903-441c-4f34-8805-a1d2f261e9a3"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""097420a1-9878-4f14-abc4-c407f14c9423"",
                    ""path"": ""<Gamepad>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""fe84d297-1b56-4cda-9ef2-9df158c78219"",
                    ""path"": ""<Gamepad>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""f1bddb00-2974-4941-ae0e-31b4e78c06ad"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""1297f429-671a-49b6-8d8d-ce28089eb9e4"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""2d0791bc-dbd3-44d0-a304-442a3c4df100"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9e12bd74-218f-430d-b3d3-0003a5cc582e"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""268952ec-9b4e-4100-9152-5f7a58e830be"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""aa1fbe79-0f56-4066-b290-6215a772bf66"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9b399182-0862-4562-ae42-355492fe38ab"",
                    ""path"": ""<Keyboard>/leftCtrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Crouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e840ace9-8239-4810-8130-a1c76c3340f5"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Crouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b7a01145-2330-4df7-b383-f06e9846c849"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Sprint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""17967b9d-2b46-4dcc-b9cb-924ebf2af9ff"",
                    ""path"": ""<Gamepad>/leftStickPress"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Sprint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Onfoot
        m_Onfoot = asset.FindActionMap("Onfoot", throwIfNotFound: true);
        m_Onfoot_Movement = m_Onfoot.FindAction("Movement", throwIfNotFound: true);
        m_Onfoot_Jump = m_Onfoot.FindAction("Jump", throwIfNotFound: true);
        m_Onfoot_Look = m_Onfoot.FindAction("Look", throwIfNotFound: true);
        m_Onfoot_Crouch = m_Onfoot.FindAction("Crouch", throwIfNotFound: true);
        m_Onfoot_Sprint = m_Onfoot.FindAction("Sprint", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Onfoot
    private readonly InputActionMap m_Onfoot;
    private IOnfootActions m_OnfootActionsCallbackInterface;
    private readonly InputAction m_Onfoot_Movement;
    private readonly InputAction m_Onfoot_Jump;
    private readonly InputAction m_Onfoot_Look;
    private readonly InputAction m_Onfoot_Crouch;
    private readonly InputAction m_Onfoot_Sprint;
    public struct OnfootActions
    {
        private @PlayerInput m_Wrapper;
        public OnfootActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_Onfoot_Movement;
        public InputAction @Jump => m_Wrapper.m_Onfoot_Jump;
        public InputAction @Look => m_Wrapper.m_Onfoot_Look;
        public InputAction @Crouch => m_Wrapper.m_Onfoot_Crouch;
        public InputAction @Sprint => m_Wrapper.m_Onfoot_Sprint;
        public InputActionMap Get() { return m_Wrapper.m_Onfoot; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(OnfootActions set) { return set.Get(); }
        public void SetCallbacks(IOnfootActions instance)
        {
            if (m_Wrapper.m_OnfootActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_OnfootActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_OnfootActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_OnfootActionsCallbackInterface.OnMovement;
                @Jump.started -= m_Wrapper.m_OnfootActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_OnfootActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_OnfootActionsCallbackInterface.OnJump;
                @Look.started -= m_Wrapper.m_OnfootActionsCallbackInterface.OnLook;
                @Look.performed -= m_Wrapper.m_OnfootActionsCallbackInterface.OnLook;
                @Look.canceled -= m_Wrapper.m_OnfootActionsCallbackInterface.OnLook;
                @Crouch.started -= m_Wrapper.m_OnfootActionsCallbackInterface.OnCrouch;
                @Crouch.performed -= m_Wrapper.m_OnfootActionsCallbackInterface.OnCrouch;
                @Crouch.canceled -= m_Wrapper.m_OnfootActionsCallbackInterface.OnCrouch;
                @Sprint.started -= m_Wrapper.m_OnfootActionsCallbackInterface.OnSprint;
                @Sprint.performed -= m_Wrapper.m_OnfootActionsCallbackInterface.OnSprint;
                @Sprint.canceled -= m_Wrapper.m_OnfootActionsCallbackInterface.OnSprint;
            }
            m_Wrapper.m_OnfootActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Look.started += instance.OnLook;
                @Look.performed += instance.OnLook;
                @Look.canceled += instance.OnLook;
                @Crouch.started += instance.OnCrouch;
                @Crouch.performed += instance.OnCrouch;
                @Crouch.canceled += instance.OnCrouch;
                @Sprint.started += instance.OnSprint;
                @Sprint.performed += instance.OnSprint;
                @Sprint.canceled += instance.OnSprint;
            }
        }
    }
    public OnfootActions @Onfoot => new OnfootActions(this);
    public interface IOnfootActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
        void OnCrouch(InputAction.CallbackContext context);
        void OnSprint(InputAction.CallbackContext context);
    }
}
